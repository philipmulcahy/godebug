-> _ = "breakpoint"
(godebug) n
-> go func() {
(godebug) list

24: 
25:     	// -------------------
26:     	// Check simple cases.
27: 
28: --> 	go func() {
29:     		select {}
30:     	}()
31: 
32:     	select {

(godebug) step
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
< All channel expressions evaluated. Choosing case to proceed. >
-> default:
(godebug) n
-> c[0] <- 0
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) n
-> c[0] <- 0
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) hi
Invalid command. Try "help".
(godebug) n
-> hi := "hello"
(godebug) hi
Invalid command. Try "help".
(godebug) n
-> fmt.Println(hi)
(godebug) p hi
"hello"
(godebug) n
hello
-> c[0] <- 0
(godebug) n
-> hi := "hi"
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case <-c[0]:
(godebug) n
-> hi := "hello"
(godebug) n
-> fmt.Println(hi)
(godebug) p hi
"hello"
(godebug) n
hello
-> _ = hi
(godebug) p hi
"hi"
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case <-c[1]:
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> default:
(godebug) n
-> hi := "hello"
(godebug) p hi
undefined: hi
(godebug) n
-> fmt.Println(hi)
(godebug) p hi
"hello"
(godebug) n
hello
-> c[9] <- 1
(godebug) n
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case <-c[0]:
(godebug) n
-> case _ = <-c[1]:
(godebug) n
-> case r1 = <-c[2]:
(godebug) n
-> case r2 := <-c[3]:
(godebug) n
-> case _, _ = <-c[4]:
(godebug) n
-> case r1, _ = <-c[5]:
(godebug) n
-> case _, ok = <-c[6]:
(godebug) n
-> case _, ok1 := <-c[7]:
(godebug) n
-> case r1, ok = <-c[8]:
(godebug) n
-> case r2, ok := <-c[9]: // This is the case that will proceed.
(godebug) n
-> case <-foo():
(godebug) step
-> return make(chan int)
(godebug) step
-> case _ = <-foo():
(godebug) step
-> return make(chan int)
(godebug) next
-> case r1 = <-foo():
(godebug) list

96:     		_, _ = r2, ok
97: 
98:     	case <-foo():
99:     	case _ = <-foo():
100: --> 	case r1 = <-foo():
101:     	case r2 := <-foo():
102:     		_ = r2
103: 
104:     	case _, _ = <-foo():

(godebug) n
-> case r2 := <-foo():
(godebug) n
-> case _, _ = <-foo():
(godebug) n
-> case r1, _ = <-foo():
(godebug) n
-> case _, ok = <-foo():
(godebug) s
-> return make(chan int)
(godebug) n
-> case _, ok1 := <-foo():
(godebug) n
-> case r1, ok = <-foo():
(godebug) n
-> case r2, ok := <-foo():
(godebug) n
< All channel expressions evaluated. Choosing case to proceed. >
-> case r2, ok := <-c[9]: // This is the case that will proceed.
(godebug) list

91:     	case _, ok = <-c[6]:
92:     	case _, ok1 := <-c[7]:
93:     		_ = ok1
94:     	case r1, ok = <-c[8]:
95: --> 	case r2, ok := <-c[9]: // This is the case that will proceed.
96:     		_, _ = r2, ok
97: 
98:     	case <-foo():
99:     	case _ = <-foo():

(godebug) n
-> _, _ = r2, ok
(godebug) p ok
true
(godebug) p r2
1
(godebug) n
-> c[0], c[1] = make(chan int), make(chan int) // unbuffered
(godebug) p r2
undefined: r2
(godebug) n
-> go func() {
(godebug) step
-> select {
(godebug) n
< Evaluating channel expressions and RHS of send expressions. >
-> case c[0] <- 0:
(godebug) n
-> case c[1] <- bar():
(godebug) step
-> return 0
(godebug) step
-> case foo() <- 0:
(godebug) step
-> return make(chan int)
(godebug) step
-> case foo() <- bar():
(godebug) step
-> return make(chan int)
(godebug) s
-> return 0
(godebug) step
< All channel expressions evaluated. Choosing case to proceed. >
-> case c[1] <- bar():
(godebug) step
-> fmt.Println("sent")
(godebug) step
sent
